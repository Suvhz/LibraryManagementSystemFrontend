{"ast":null,"code":"import _classCallCheck from \"E:\\\\FrontendMaster\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\FrontendMaster\\\\test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport history from '../components/history';\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: 'suvha.auth0.com',\n      clientID: 'O-t9pr-Te-UugJkVXOiUnZ20YztaU7Tv',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile read:messages',\n      audience: 'https://suvha.com/api'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n    this.scheduleRenewal();\n  }\n\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      this.auth0.parseHash(function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n\n          history.replace('/book');\n        } else if (err) {\n          history.replace('/');\n          console.log(err);\n        }\n      });\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set the time that the Access Token will expire at\n      var expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      localStorage.setItem('access_token', authResult.accessToken);\n      localStorage.setItem('id_token', authResult.idToken);\n      localStorage.setItem('expires_at', expiresAt);\n      this.scheduleRenewal();\n      history.replace('/book');\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear Access Token and ID Token from local storage\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at');\n      this.userProfile = null;\n      clearTimeout(this.tokenRenewalTimeout);\n      history.replace('/home');\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      var accessToken = localStorage.getItem('access_token');\n\n      if (!accessToken) {\n        throw new Error('No access token found');\n      }\n\n      return accessToken;\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // Access Token's expiry time\n      var expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n      return new Date().getTime() < expiresAt;\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile(cb) {\n      var _this2 = this;\n\n      var accessToken = this.getAccessToken();\n      this.auth0.client.userInfo(accessToken, function (err, profile) {\n        if (profile) {\n          _this2.userProfile = profile;\n        }\n\n        cb(err, profile);\n      });\n    }\n  }, {\n    key: \"renewToken\",\n    value: function renewToken() {\n      var _this3 = this;\n\n      auth0.checkSession({}, function (err, result) {\n        if (err) {\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        } else {\n          _this3.setSession(result);\n\n          alert(\"Successfully renewed auth!\");\n        }\n      });\n    }\n  }, {\n    key: \"scheduleRenewal\",\n    value: function scheduleRenewal() {\n      var _this4 = this;\n\n      var expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n      var delay = expiresAt - Date.now();\n\n      if (delay > 0) {\n        this.tokenRenewalTimeout = setTimeout(function () {\n          _this4.renewToken();\n        }, delay);\n      }\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["E:\\FrontendMaster\\test\\src\\service\\auth0.js"],"names":["auth0","history","Auth","WebAuth","domain","clientID","redirectUri","responseType","scope","audience","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getProfile","scheduleRenewal","authorize","parseHash","err","authResult","accessToken","idToken","setSession","replace","console","log","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","removeItem","userProfile","clearTimeout","tokenRenewalTimeout","getItem","Error","parse","cb","client","userInfo","profile","checkSession","result","alert","error","error_description","delay","now","setTimeout","renewToken"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js';\r\nimport history from '../components/history';\r\nexport default class Auth {\r\n    userProfile;\r\n    tokenRenewalTimeout;\r\n    constructor() {\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        this.isAuthenticated = this.isAuthenticated.bind(this);\r\n        this.getAccessToken = this.getAccessToken.bind(this);\r\n        this.getProfile = this.getProfile.bind(this);\r\n        this.scheduleRenewal();\r\n    }\r\n    auth0 = new auth0.WebAuth({\r\n        domain: 'suvha.auth0.com',\r\n        clientID: 'O-t9pr-Te-UugJkVXOiUnZ20YztaU7Tv',\r\n        redirectUri: 'http://localhost:3000/callback',\r\n        responseType: 'token id_token',\r\n        scope: 'openid profile read:messages',\r\n        audience: 'https://suvha.com/api'\r\n    });\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    handleAuthentication() {\r\n        this.auth0.parseHash((err, authResult) => {\r\n            if (authResult && authResult.accessToken && authResult.idToken) {\r\n                this.setSession(authResult);\r\n                history.replace('/book');\r\n            } else if (err) {\r\n                history.replace('/');\r\n                console.log(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    setSession(authResult) {\r\n        // Set the time that the Access Token will expire at\r\n        let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\r\n        localStorage.setItem('access_token', authResult.accessToken);\r\n        localStorage.setItem('id_token', authResult.idToken);\r\n        localStorage.setItem('expires_at', expiresAt);\r\n        this.scheduleRenewal();\r\n        history.replace('/book');\r\n    }\r\n\r\n    logout() {\r\n        // Clear Access Token and ID Token from local storage\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('id_token');\r\n        localStorage.removeItem('expires_at');\r\n        this.userProfile = null;\r\n        clearTimeout(this.tokenRenewalTimeout);\r\n        history.replace('/home');\r\n    }\r\n    getAccessToken() {\r\n        const accessToken = localStorage.getItem('access_token');\r\n        if (!accessToken) {\r\n            throw new Error('No access token found');\r\n        }\r\n        return accessToken;\r\n    }\r\n    isAuthenticated() {\r\n        // Check whether the current time is past the\r\n        // Access Token's expiry time\r\n        let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\r\n        return new Date().getTime() < expiresAt;\r\n    }\r\n    getProfile(cb) {\r\n        let accessToken = this.getAccessToken();\r\n        this.auth0.client.userInfo(accessToken, (err, profile) => {\r\n            if (profile) {\r\n                this.userProfile = profile;\r\n            }\r\n            cb(err, profile);\r\n        });\r\n    }\r\n\r\n    renewToken() {\r\n        auth0.checkSession({},\r\n            (err, result) => {\r\n                if (err) {\r\n                    alert(\r\n                        `Could not get a new token (${err.error}: ${err.error_description}).`\r\n                    );\r\n                } else {\r\n                    this.setSession(result);\r\n                    alert(`Successfully renewed auth!`);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    scheduleRenewal() {\r\n        const expiresAt = JSON.parse(localStorage.getItem('expires_at'));\r\n        const delay = expiresAt - Date.now();\r\n        if (delay > 0) {\r\n            this.tokenRenewalTimeout = setTimeout(() => {\r\n                this.renewToken();\r\n            }, delay);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}